
#ifndef omni_4wd_CONTROLLER_HPP_
#define omni_4wd_CONTROLLER_HPP_

#include <chrono>
#include <cmath>
#include <memory>
#include <queue>
#include <string>
#include <vector>

#include "controller_interface/controller_interface.hpp"
#include "controller_interface/controller_interface_base.hpp"
#include "odometry.hpp"
#include "speed_limiter.hpp"
#include "visibility_control.h"
#include "geometry_msgs/msg/twist.hpp"
#include "geometry_msgs/msg/twist_stamped.hpp"
#include "hardware_interface/handle.hpp"
#include "nav_msgs/msg/odometry.hpp"
#include "rclcpp/rclcpp.hpp"
#include "rclcpp_lifecycle/state.hpp"
#include "realtime_tools/realtime_box.h"
#include "realtime_tools/realtime_buffer.h"
#include "realtime_tools/realtime_publisher.h"
#include "tf2_msgs/msg/tf_message.hpp"

// auto-generated by generate_parameter_library
#include "omni_4wd_controller_parameters.hpp"

namespace omni_4wd_controller
{
    class Omni4WDController : public controller_interface::ControllerInterface
    {
        using Twist = geometry_msgs::msg::TwistStamped;

    public:
        Omni_4WD_CONTROLLER_PUBLIC
        Omni4WDController();

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::InterfaceConfiguration
            command_interface_configuration() const override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::InterfaceConfiguration
            state_interface_configuration() const override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::return_type
            update(
                const rclcpp::Time &time, const rclcpp::Duration &period) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_init() override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_configure(
                const rclcpp_lifecycle::State &previous_state) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_activate(
                const rclcpp_lifecycle::State &previous_state) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_deactivate(
                const rclcpp_lifecycle::State &previous_state) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_cleanup(
                const rclcpp_lifecycle::State &previous_state) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_error(
                const rclcpp_lifecycle::State &previous_state) override;

        Omni_4WD_CONTROLLER_PUBLIC
            controller_interface::CallbackReturn
            on_shutdown(
                const rclcpp_lifecycle::State &previous_state) override;

    protected:
        struct WheelHandle
        {
            std::reference_wrapper<const hardware_interface::LoanedStateInterface> feedback;
            std::reference_wrapper<hardware_interface::LoanedCommandInterface> velocity;
        };

        const char *feedback_type() const;
        controller_interface::CallbackReturn configure_side(
            std::string side, std::string wheel_name,
            std::function<void(WheelHandle)> registered_handle_func);

        std::shared_ptr<WheelHandle> registered_front_left_wheel_handles_;
        std::shared_ptr<WheelHandle> registered_front_right_wheel_handles_;
        std::shared_ptr<WheelHandle> registered_rear_left_wheel_handles_;
        std::shared_ptr<WheelHandle> registered_rear_right_wheel_handles_;

        // Parameters from ROS for diff_drive_controller
        std::shared_ptr<ParamListener> param_listener_;
        Params params_;

        Odometry odometry_;

        // Timeout to consider cmd_vel commands old
        std::chrono::milliseconds cmd_vel_timeout_{500};

        std::shared_ptr<rclcpp::Publisher<nav_msgs::msg::Odometry>> odometry_publisher_ = nullptr;
        std::shared_ptr<realtime_tools::RealtimePublisher<nav_msgs::msg::Odometry>>
            realtime_odometry_publisher_ = nullptr;

        std::shared_ptr<rclcpp::Publisher<tf2_msgs::msg::TFMessage>> odometry_transform_publisher_ =
            nullptr;
        std::shared_ptr<realtime_tools::RealtimePublisher<tf2_msgs::msg::TFMessage>>
            realtime_odometry_transform_publisher_ = nullptr;

        bool subscriber_is_active_ = false;
        rclcpp::Subscription<Twist>::SharedPtr velocity_command_subscriber_ = nullptr;
        rclcpp::Subscription<geometry_msgs::msg::Twist>::SharedPtr
            velocity_command_unstamped_subscriber_ = nullptr;

        realtime_tools::RealtimeBox<std::shared_ptr<Twist>> received_velocity_msg_ptr_{nullptr};

        std::queue<Twist> previous_commands_; // last two commands

        // speed limiters
        SpeedLimiter limiter_linear_x_;
        SpeedLimiter limiter_linear_y_;
        SpeedLimiter limiter_angular_;

        bool publish_limited_velocity_ = false;
        std::shared_ptr<rclcpp::Publisher<Twist>> limited_velocity_publisher_ = nullptr;
        std::shared_ptr<realtime_tools::RealtimePublisher<Twist>> realtime_limited_velocity_publisher_ =
            nullptr;

        rclcpp::Time previous_update_timestamp_{0};

        // publish rate limiter
        double publish_rate_ = 50.0;
        rclcpp::Duration publish_period_ = rclcpp::Duration::from_nanoseconds(0);
        rclcpp::Time previous_publish_timestamp_{0, 0, RCL_CLOCK_UNINITIALIZED};

        bool is_halted = false;
        bool use_stamped_vel_ = true;

        bool reset();
        void halt();

        std::function<void(std::string)> logInfoOutput_;
        std::function<void(std::string)> logErrorOutput_;
    };
} // namespace diff_drive_controller
#endif // omni_4wd_CONTROLLER_HPP_